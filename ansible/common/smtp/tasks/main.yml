---
- name: AWS and System Setup
  block:
    - name: Install AWS boto3 Python SDK for AWS interactions
      ansible.builtin.pip:
        name: boto3
        state: present
        version: 1.36.7

    - name: Verify installed boto3 version matches required 1.36.7
      ansible.builtin.command:
        cmd: python3 -c "import boto3; print(boto3.__version__)"
      register: boto3_check
      changed_when: false

    - name: Display current boto3 version for verification
      ansible.builtin.debug:
        msg: "{{ boto3_check.stdout }}"

    - name: Collect AWS EC2 instance metadata for configuration
      amazon.aws.ec2_metadata_facts:

    - name: Display current AWS region from instance metadata
      debug:
        msg: "The AWS region is {{ ansible_ec2_instance_identity_document_region }}"

    - name: Install telnet package for network connectivity testing
      ansible.builtin.dnf:
        name: telnet
        state: present

    - name: Fetch Gateway B EC2 instance information
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ client_name }}-gw-b"
        region: "{{ ansible_ec2_instance_identity_document_region }}"
      register: gw_b_instance_info

    - name: Set Gateway B private IP as a fact
      set_fact:
        old_gw_b_server_ip: "{{ gw_b_instance_info.instances[0].private_ip_address }}"

    - name: Debug Gateway B private IP
      debug:
        var: old_gw_b_server_ip

    - name: Wait for 15 seconds to ensure boto3 and dependencies are loaded
      ansible.builtin.pause:
        seconds: 15

- name: Postfix Initial Setup
  block:
    - name: Install postfix, rsync and nc packages for email delivery setup
      ansible.builtin.dnf:
        name:
          - postfix
          - rsync
          - nc
        state: present

    - name: Retrieve proot user password from SSM
      set_fact:
        proot_password: "{{ lookup('amazon.aws.ssm_parameter', ssm_parameter_name, region=ansible_ec2_instance_identity_document_region) }}"

    - name: Create modified proot password
      set_fact:
        proot_password_modified: "{{ proot_password | regex_replace('23$', '') }}"

    - name: Install pexpect library in the Python environment (dependency for copying files from old server)
      ansible.builtin.pip:
        name: pexpect
        state: present

    - name: Ensure the target directory exists on this server
      ansible.builtin.file:
        path: /etc/postfix
        state: directory
        owner: root
        group: root
        mode: '0755'

- name: Postfix Configuration File Transfer
  block:
    - name: Check if /etc/postfix/access exists
      ansible.builtin.stat:
        path: "/etc/postfix/access"
      register: access_file

    - name: Copy /etc/postfix/access file from old gateway server using expect
      ansible.builtin.expect:
        command: "scp -o StrictHostKeyChecking=no proot@{{ old_gw_b_server_ip }}:/etc/postfix/access /etc/postfix/"
        responses:
          password: "{{ proot_password_modified }}"
      when: not access_file.stat.exists
      register: scp_access_result

    - name: Check if /etc/postfix/blacklisted_domains exists
      ansible.builtin.stat:
        path: "/etc/postfix/blacklisted_domains"
      register: blacklisted_domains_file

    - name: Copy /etc/postfix/blacklisted_domains file from old gateway server using expect
      ansible.builtin.expect:
        command: "scp -o StrictHostKeyChecking=no proot@{{ old_gw_b_server_ip }}:/etc/postfix/blacklisted_domains /etc/postfix/"
        responses:
          password: "{{ proot_password_modified }}"
      when: not blacklisted_domains_file.stat.exists
      register: scp_blacklisted_domains_result

    - name: Check if /etc/postfix/blacklisted_senders exists
      ansible.builtin.stat:
        path: "/etc/postfix/blacklisted_senders"
      register: blacklisted_senders_file

    - name: Copy /etc/postfix/blacklisted_senders file from old gateway server using expect
      ansible.builtin.expect:
        command: "scp -o StrictHostKeyChecking=no proot@{{ old_gw_b_server_ip }}:/etc/postfix/blacklisted_senders /etc/postfix/"
        responses:
          password: "{{ proot_password_modified }}"
      when: not blacklisted_senders_file.stat.exists
      register: scp_blacklisted_senders_result

    - name: Check if /etc/postfix/sasl_passwd exists
      ansible.builtin.stat:
        path: "/etc/postfix/sasl_passwd"
      register: sasl_passwd_file

    - name: Copy /etc/postfix/sasl_passwd file from old gateway server using expect
      ansible.builtin.expect:
        command: "scp -o StrictHostKeyChecking=no proot@{{ old_gw_b_server_ip }}:/etc/postfix/sasl_passwd /etc/postfix/"
        responses:
          password: "{{ proot_password_modified }}"
      when: not sasl_passwd_file.stat.exists
      register: scp_sasl_passwd_result

    - name: Copy /etc/postfix/main.cf file from old gateway server using expect
      ansible.builtin.expect:
        command: "scp -o StrictHostKeyChecking=no proot@{{ old_gw_b_server_ip }}:/etc/postfix/main.cf /etc/postfix/"
        responses:
          password: "{{ proot_password_modified }}"
      register: scp_main_cf_result

- name: Postfix Service Configuration
  block:
    - name: Change ownership of /etc/postfix directory to root
      ansible.builtin.file:
        path: /etc/postfix
        owner: root
        group: root
        recurse: yes

    - name: Set permissions of /etc/postfix directory to 744
      ansible.builtin.file:
        path: /etc/postfix
        mode: '0744'

    - name: Ensure postfix service is enabled and running
      ansible.builtin.service:
        name: postfix
        state: started
        enabled: yes
      notify: restart postfix

    - name: Generate postmap for access file
      command: postmap /etc/postfix/access
      args:
        creates: /etc/postfix/access.db

    - name: Generate postmap for blacklisted_domains file
      command: postmap /etc/postfix/blacklisted_domains
      args:
        creates: /etc/postfix/blacklisted_domains.db

    - name: Generate postmap for blacklisted_senders file
      command: postmap /etc/postfix/blacklisted_senders
      args:
        creates: /etc/postfix/blacklisted_senders.db

    - name: Generate postmap for sasl_passwd file
      command: postmap /etc/postfix/sasl_passwd
      args:
        creates: /etc/postfix/sasl_passwd.db

- name: Mail Testing
  block:
    - name: Get domain from AWS SES in us-east-2
      command: aws ses list-identities --region us-east-2
      register: ses_output_us_east_2
      ignore_errors: true

    - name: Get domain from AWS SES in us-east-1 if not found in us-east-2
      command: aws ses list-identities --region us-east-1
      register: ses_output_us_east_1
      when: >
        ses_output_us_east_2.rc != 0 or 
        (ses_output_us_east_2.rc == 0 and ((ses_output_us_east_2.stdout | from_json).Identities | length == 0))
      ignore_errors: true

    - name: Combine identity lists from both regions
      set_fact:
        # Get identities from us-east-2 if command succeeded
        identities_2: "{{ (ses_output_us_east_2.stdout | from_json).Identities | default([]) if (ses_output_us_east_2 is defined and ses_output_us_east_2.rc == 0) else [] }}"
        # Get identities from us-east-1 if command ran and succeeded
        identities_1: "{{ (ses_output_us_east_1.stdout | from_json).Identities | default([]) if (ses_output_us_east_1 is defined and ses_output_us_east_1.rc is defined and ses_output_us_east_1.rc == 0) else [] }}"

    - name: Set final domain variable from combined list
      set_fact:
        all_identities: "{{ identities_2 + identities_1 }}"
        # Filter to get only domain names (not email addresses)
        domain_candidates: "{{ (identities_2 + identities_1) | select('match', '^[^@]+\\.[a-z]+$') | list }}"

    - name: Select best domain
      set_fact:
        domain: "{{ domain_candidates | first | default((identities_2 + identities_1) | first | default('')) }}"

    - name: Debug all variables
      debug:
        msg: |
          US-East-2 identities: {{ identities_2 }}
          US-East-1 identities: {{ identities_1 }}
          All identities: {{ all_identities }}
          Domain candidates: {{ domain_candidates }}
          Selected domain: {{ domain }}

    - name: Send test email using netcat
      shell: |
        echo -e "HELO {{ domain }}\nMAIL FROM: <donotreply@{{ domain }}>\nRCPT TO: <{{ recipient }}>\nDATA\nSubject: test\n\nThis is a test email from Postfix.\n.\nQUIT" | nc localhost 25
      register: email_test_output

    - name: Verify email was queued successfully
      fail:
        msg: "Postfix email test failed! Output: {{ email_test_output.stdout }}"
      when: not email_test_output.stdout is search(pattern)
