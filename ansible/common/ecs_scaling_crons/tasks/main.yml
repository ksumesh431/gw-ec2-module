---
# -------------------------------
# Step 1: Create Python venv at /root/ecs
# -------------------------------
- name: Ensure python3 and venv are installed (Amazon Linux 2023)
  ansible.builtin.yum:
    name:
      - python3
    state: present

- name: Create Python virtual environment at /root/ecs
  ansible.builtin.command: python3 -m venv /root/ecs
  args:
    creates: /root/ecs/bin/python3

# -------------------------------
# Step 2: Create directory for cron scripts
# -------------------------------
- name: Create directory /root/ecs_scaling_crons
  ansible.builtin.file:
    path: /root/ecs_scaling_crons
    state: directory
    mode: "0755"

# -------------------------------
# Step 3: Copy scaling_ecs_Services.py (from files/)
# -------------------------------
- name: Copy scaling_ecs_Services.py to /root/ecs_scaling_crons
  ansible.builtin.copy:
    src: files/scaling_ecs_Services.py
    dest: /root/ecs_scaling_crons/scaling_ecs_Services.py
    mode: "0755"

# -------------------------------
# Step 4: Copy auto_scaling_group_update.py (from files/)
# -------------------------------
- name: Copy auto_scaling_group_update.py to /root/ecs_scaling_crons
  ansible.builtin.copy:
    src: files/auto_scaling_group_update.py
    dest: /root/ecs_scaling_crons/auto_scaling_group_update.py
    mode: "0755"

# -------------------------------
# Step 5: Setup Cron Jobs (using /root/ecs/bin/python3)
# -------------------------------
- name: Morning ecs cronjob
  ansible.builtin.cron:
    name: "Morning ecs cronjob"
    job: "/root/ecs/bin/python3 /root/ecs_scaling_crons/scaling_ecs_Services.py >> /var/log/ecs_scaling.logs"
    minute: "50"
    hour: "6"
    weekday: "1-5"

- name: Morning Auto-Scaling cronjob
  ansible.builtin.cron:
    name: "Morning Auto-Scaling cronjob"
    job: "/root/ecs/bin/python3 /root/ecs_scaling_crons/auto_scaling_group_update.py >> /var/log/ecs_scaling.logs"
    minute: "45"
    hour: "6"
    weekday: "1-5"

- name: Night ecs cronjob
  ansible.builtin.cron:
    name: "Night ecs cronjob"
    job: "/root/ecs/bin/python3 /root/ecs_scaling_crons/scaling_ecs_Services.py >> /var/log/ecs_scaling.logs"
    minute: "0"
    hour: "19"
    weekday: "1-5"

- name: Night Autoscaling ecs cronjob
  ansible.builtin.cron:
    name: "Night Autoscaling ecs cronjob"
    job: "sudo /root/ecs/bin/python3 /root/ecs_scaling_crons/auto_scaling_group_update.py >> /var/log/ecs_scaling.logs"
    minute: "15"
    hour: "19"
    weekday: "5"

- name: Night Auto-Scaling job
  ansible.builtin.cron:
    name: "Night Auto-Scaling job"
    job: "/root/ecs/bin/python3 /root/ecs_scaling_crons/auto_scaling_group_update.py >> /var/log/ecs_scaling.logs"
    minute: "10"
    hour: "19"
    weekday: "1-5"

- name: CronJOB to delete the scaling logs
  ansible.builtin.cron:
    name: "CronJOB to delete the scaling logs"
    job: "echo '' > /var/log/ecs_scaling.logs"
    minute: "30"
    hour: "13"
    weekday: "6"

# -------------------------------
# Step 6: Install pip inside venv
# -------------------------------
- name: Ensure pip is installed inside /root/ecs venv
  ansible.builtin.command: /root/ecs/bin/python3 -m ensurepip
  args:
    creates: /root/ecs/bin/pip

# -------------------------------
# Step 7: Create automation scripts directory
# -------------------------------
- name: Create directory /root/automation/scripts
  ansible.builtin.file:
    path: /root/automation/scripts
    state: directory
    mode: "0755"

# -------------------------------
# Step 8: Copy tomcat-container-logs-archival_to_s3.py
# -------------------------------
- name: Copy tomcat-container-logs-archival_to_s3.py to /root/automation/scripts
  ansible.builtin.copy:
    src: files/tomcat-container-logs-archival_to_s3.py
    dest: /root/automation/scripts/tomcat-container-logs-archival_to_s3.py
    mode: "0755"

# -------------------------------
# Step 9: Setup cron job for tomcat-container-logs-archival_to_s3.py
# -------------------------------
- name: CronJOB for tomcat-container-logs-archival_to_s3.py
  ansible.builtin.cron:
    name: "Tomcat logs archival to S3"
    job: "/root/ecs/bin/python3 /root/automation/scripts/tomcat-container-logs-archival_to_s3.py &>> /var/log/efs_to_s3_move_logs.log"
    minute: "45"
    hour: "14"
