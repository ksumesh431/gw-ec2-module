---
- name: Install AWS boto3 Python SDK (pinned)
  ansible.builtin.pip:
    name: boto3
    state: present
    version: "{{ boto3_version }}"

- name: Clear Ansible's Python module cache
  ansible.builtin.meta: clear_facts

- name: Reset connection to refresh Python environment
  ansible.builtin.meta: reset_connection

- name: Validate boto3 installation and availability
  ansible.builtin.command:
    cmd: python3 -c "import boto3, botocore; print('AWS libraries available')"
  register: aws_lib_check
  retries: 3
  delay: 2
  until: aws_lib_check.rc == 0
  changed_when: false

- name: Verify installed boto3 version matches required {{ boto3_version }}
  ansible.builtin.command:
    cmd: python3 -c "import boto3; print(boto3.__version__)"
  register: boto3_check
  changed_when: false

- name: Display current boto3 version for verification
  ansible.builtin.debug:
    msg: "{{ boto3_check.stdout }}"

- name: Collect AWS EC2 instance metadata for configuration
  amazon.aws.ec2_metadata_facts:

- name: Display current AWS region from instance metadata
  ansible.builtin.debug:
    msg: "The AWS region is {{ ansible_ec2_instance_identity_document_region }}"

- name: Install utilities
  ansible.builtin.dnf:
    name:
      - telnet
      - stunnel
    state: present

- name: Ensure stunnel group exists
  ansible.builtin.group:
    name: "{{ stunnel_group }}"
    system: true
    state: present

- name: Ensure stunnel user exists
  ansible.builtin.user:
    name: "{{ stunnel_user }}"
    group: "{{ stunnel_group }}"
    system: true
    shell: /sbin/nologin
    state: present

# Log + runtime dirs (match the config we enforce later)
- name: Ensure stunnel log directory exists
  ansible.builtin.file:
    path: "{{ stunnel_log_dir }}"
    state: directory
    owner: "{{ stunnel_user }}"
    group: "{{ stunnel_group }}"
    mode: "0750"

- name: Ensure stunnel runtime pid directory exists
  ansible.builtin.file:
    path: /run/stunnel
    state: directory
    owner: "{{ stunnel_user }}"
    group: "{{ stunnel_group }}"
    mode: "0750"

# Detect stunnel dir/service name (stunnel vs stunnel5)
- name: Verify existence of stunnel configuration directory
  ansible.builtin.stat:
    path: /etc/stunnel
  register: stunnel_dir

- name: Set stunnel directory and service variables
  ansible.builtin.set_fact:
    stunnel_dir_path: "{{ '/etc/stunnel' if stunnel_dir.stat.exists else '/etc/stunnel5' }}"
    stunnel_service: "{{ 'stunnel' if stunnel_dir.stat.exists else 'stunnel5' }}"

- name: Wait for 15 seconds before continuing
  ansible.builtin.wait_for:
    timeout: 15

# Cert from SSM
- name: Retrieve stunnel certificate from SSM
  ansible.builtin.set_fact:
    stunnel_cert: "{{ lookup('amazon.aws.ssm_parameter', stunnel_cert_param, region=ansible_ec2_instance_identity_document_region, decrypt=true) }}"
  register: stunnel_cert_result
  retries: 5
  delay: 5
  until: stunnel_cert_result is succeeded

- name: Deploy stunnel SSL certificate from SSM parameter
  ansible.builtin.copy:
    content: "{{ stunnel_cert }}"
    dest: "{{ stunnel_dir_path }}/stunnel.pem"
    owner: "{{ stunnel_user }}"
    group: "{{ stunnel_group }}"
    mode: "0600"
  notify: restart stunnel

# Pull the old stunnel.conf from existing instance via SSM CLI (AL2023 has awscli)
- name: Retrieve stunnel configuration from old EC2 instance via AWS CLI
  ansible.builtin.shell: |
    aws ssm send-command \
      --instance-ids "{{ final_vars.old_gw_a_instnace_id }}" \
      --document-name "AWS-RunShellScript" \
      --parameters 'commands=["cat /etc/stunnel/stunnel.conf"]' \
      --region "{{ ansible_ec2_instance_identity_document_region }}" \
      --output text \
      --query 'Command.CommandId'
  register: command_id
  changed_when: false

- name: Wait briefly before fetching SSM command output
  ansible.builtin.wait_for:
    timeout: 3

- name: Wait for SSM command to complete and get output
  ansible.builtin.shell: |
    aws ssm get-command-invocation \
      --command-id "{{ command_id.stdout }}" \
      --instance-id "{{ final_vars.old_gw_a_instnace_id }}" \
      --region "{{ ansible_ec2_instance_identity_document_region }}" \
      --output text \
      --query 'StandardOutputContent'
  register: stunnel_conf_output
  retries: 10
  delay: 2
  until: stunnel_conf_output.rc == 0
  changed_when: false

- name: Set stunnel configuration content
  ansible.builtin.set_fact:
    stunnel_conf: "{{ stunnel_conf_output.stdout }}"

- name: Debug fetched stunnel configuration content
  ansible.builtin.debug:
    msg: "{{ stunnel_conf | regex_replace('(?s)^(.{0,800}).*', '\\1... [truncated for log]') }}"
  when: stunnel_conf | length > 1000

- name: Save stunnel configuration for client
  ansible.builtin.copy:
    content: "{{ stunnel_conf }}"
    dest: "{{ stunnel_output_dir }}"
    mode: "0644"
    force: true # explicitly overwrite if exists

- name: Deploy stunnel service configuration from old instance
  ansible.builtin.copy:
    content: "{{ stunnel_conf }}"
    dest: "{{ stunnel_dir_path }}/stunnel.conf"
    owner: root
    group: root
    mode: "0644"
  notify: restart stunnel

# Normalize globals so it never dies on logging/PID differences
- name: Ensure 'output = {{ stunnel_log_file }}' in stunnel.conf
  ansible.builtin.lineinfile:
    path: "{{ stunnel_dir_path }}/stunnel.conf"
    regexp: '^\s*output\s*='
    line: "output = {{ stunnel_log_file }}"
    insertbefore: BOF
  notify: restart stunnel

- name: Ensure 'pid = {{ stunnel_pid_file }}' in stunnel.conf
  ansible.builtin.lineinfile:
    path: "{{ stunnel_dir_path }}/stunnel.conf"
    regexp: '^\s*pid\s*='
    line: "pid = {{ stunnel_pid_file }}"
    insertafter: '^output\s*='
  notify: restart stunnel

- name: Ensure 'debug = 5' in stunnel.conf (at top)
  ansible.builtin.lineinfile:
    path: "{{ stunnel_dir_path }}/stunnel.conf"
    regexp: '^\s*debug\s*='
    line: "debug = 5"
    insertbefore: BOF
  notify: restart stunnel

- name: Ensure stunnel log file exists with proper perms
  ansible.builtin.file:
    path: "{{ stunnel_log_file }}"
    state: touch
    owner: "{{ stunnel_user }}"
    group: "{{ stunnel_group }}"
    mode: "0640"

# Systemd: use a drop-in to point ExecStart at the right conf (no editing /usr/lib)
- name: Create systemd drop-in directory for stunnel
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ stunnel_service }}.service.d"
    state: directory
    mode: "0755"

- name: Configure stunnel ExecStart via drop-in
  ansible.builtin.copy:
    dest: "/etc/systemd/system/{{ stunnel_service }}.service.d/override.conf"
    mode: "0644"
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/bin/{{ stunnel_service }} {{ stunnel_dir_path }}/stunnel.conf
  notify: reload systemd

- name: Enable and start stunnel
  ansible.builtin.service:
    name: "{{ stunnel_service }}"
    state: started
    enabled: true
