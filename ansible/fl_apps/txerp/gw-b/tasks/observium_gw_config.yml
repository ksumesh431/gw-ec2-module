- name: Observium heartbeat cron setup block
  block:
    - name: Get IMDSv2 token
      uri:
        url: http://169.254.169.254/latest/api/token
        method: PUT
        headers:
          X-aws-ec2-metadata-token-ttl-seconds: "300"
        return_content: true
      register: imds_token

    - name: Get region
      uri:
        url: http://169.254.169.254/latest/dynamic/instance-identity/document
        method: GET
        headers:
          X-aws-ec2-metadata-token: "{{ imds_token.content }}"
        return_content: true
      register: iid_doc

    - name: Check if ObserviumHeartbeat.sh exists on old EC2 instance
      ansible.builtin.shell: |
        aws ssm send-command \
          --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["cat /usr/local/bin/ObserviumHeartbeat.sh"]' \
          --region "{{ aws_region }}" \
          --output text \
          --query 'Command.CommandId'
      register: obs_command_id

    - name: Wait for 3 seconds before fetching SSM command output
      ansible.builtin.wait_for:
        timeout: 3

    - name: Get ObserviumHeartbeat.sh content from SSM
      ansible.builtin.shell: |
        aws ssm get-command-invocation \
          --command-id "{{ obs_command_id.stdout }}" \
          --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
          --region "{{ aws_region }}" \
          --output text \
          --query 'StandardOutputContent'
      register: obs_file_output
      retries: 10
      delay: 2
      until: obs_file_output.rc == 0

    - name: Check if file was found
      ansible.builtin.debug:
        msg: "File not found on instance {{ final_vars.old_gw_b_instnace_id }}"
      when: obs_file_output.stdout == ""

    - name: Copy ObserviumHeartbeat.sh to localhost
      ansible.builtin.copy:
        content: "{{ obs_file_output.stdout }}"
        dest: /usr/local/bin/ObserviumHeartbeat.sh
        mode: "0755"
      when: obs_file_output.stdout != ""

    - name: Set cron job for ObserviumHeartbeat.sh
      ansible.builtin.cron:
        name: "Observium Heartbeat"
        job: "/usr/local/bin/ObserviumHeartbeat.sh"
        minute: "*/5"
      when: obs_file_output.stdout != ""

- name: Observium migration block
  block:
    - name: Run DB dump on old server via SSM
      ansible.builtin.shell: |
        aws ssm send-command \
          --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Observium DB Dump" \
          --parameters 'commands=["mysqldump -u observium -pprologic --databases observium --no-tablespaces --add-drop-table --extended-insert > /opt/observium/observium-dump.sql"]' \
          --region "{{ aws_region }}" \
          --query "Command.CommandId" \
          --output text
      register: db_dump_cmd
      changed_when: false

    - name: Archive RRDs on old server
      ansible.builtin.shell: |
        aws ssm send-command \
          --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Archive Observium RRDs" \
          --parameters 'commands=["cd /opt/observium && tar -zcf observium-rrd.tar.gz rrd"]' \
          --region "{{ aws_region }}" \
          --query "Command.CommandId" \
          --output text
      register: rrd_archive_cmd
      changed_when: false

    - name: Copy DB dump via SSM
      ansible.builtin.fetch:
        src: /opt/observium/observium-dump.sql
        dest: /tmp/observium-dump.sql
        flat: true
      delegate_to: "{{ final_vars.old_gw_b_host }}"

    - name: Copy RRD archive via SSM
      ansible.builtin.fetch:
        src: /opt/observium/observium-rrd.tar.gz
        dest: /tmp/observium-rrd.tar.gz
        flat: true
      delegate_to: "{{ final_vars.old_gw_b_host }}"

    - name: Push DB dump to new server
      ansible.builtin.copy:
        src: /tmp/observium-dump.sql
        dest: /opt/observium/observium-dump.sql
        owner: observium
        group: apache
        mode: "0644"

    - name: Push RRD archive to new server
      ansible.builtin.copy:
        src: /tmp/observium-rrd.tar.gz
        dest: /opt/observium/observium-rrd.tar.gz
        owner: observium
        group: apache
        mode: "0644"

    - name: Restore DB on new server
      ansible.builtin.shell: |
        mysql -u observium -pprologic -e "USE observium; SHOW TABLES;" | grep Devices || \
        mysql -u observium -pprologic observium < /opt/observium/observium-dump.sql
      args:
        creates: /opt/observium/.db_restored # marker file
      register: db_restore
      changed_when: db_restore.rc == 0

    - name: Create DB restore marker
      ansible.builtin.file:
        path: /opt/observium/.db_restored
        state: touch
      when: db_restore is succeeded

    - name: Extract RRDs if not already extracted
      ansible.builtin.unarchive:
        src: /opt/observium/observium-rrd.tar.gz
        dest: /opt/observium/
        owner: observium
        group: apache
        remote_src: true
        creates: /opt/observium/rrd
      register: rrd_restore

    - name: Fix permissions on RRDs
      ansible.builtin.file:
        path: /opt/observium/rrd
        owner: observium
        group: apache
        recurse: true
      when: rrd_restore.changed
