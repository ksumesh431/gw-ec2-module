- name: Observium heartbeat cron setup block
  block:
    - name: Get IMDSv2 token
      uri:
        url: http://169.254.169.254/latest/api/token
        method: PUT
        headers:
          X-aws-ec2-metadata-token-ttl-seconds: "300"
        return_content: true
      register: imds_token

    - name: Get region
      uri:
        url: http://169.254.169.254/latest/dynamic/instance-identity/document
        method: GET
        headers:
          X-aws-ec2-metadata-token: "{{ imds_token.content }}"
        return_content: true
      register: iid_doc

    - name: Check if ObserviumHeartbeat.sh exists on old EC2 instance
      ansible.builtin.shell: |
        aws ssm send-command \
          --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["cat /usr/local/bin/ObserviumHeartbeat.sh"]' \
          --region "{{ aws_region }}" \
          --output text \
          --query 'Command.CommandId'
      register: obs_command_id

    - name: Wait for 3 seconds before fetching SSM command output
      ansible.builtin.wait_for:
        timeout: 3

    - name: Get ObserviumHeartbeat.sh content from SSM
      ansible.builtin.shell: |
        aws ssm get-command-invocation \
          --command-id "{{ obs_command_id.stdout }}" \
          --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
          --region "{{ aws_region }}" \
          --output text \
          --query 'StandardOutputContent'
      register: obs_file_output
      retries: 10
      delay: 2
      until: obs_file_output.rc == 0

    - name: Check if file was found
      ansible.builtin.debug:
        msg: "File not found on instance {{ final_vars.old_gw_b_instnace_id }}"
      when: obs_file_output.stdout == ""

    - name: Copy ObserviumHeartbeat.sh to localhost
      ansible.builtin.copy:
        content: "{{ obs_file_output.stdout }}"
        dest: /usr/local/bin/ObserviumHeartbeat.sh
        mode: "0755"
      when: obs_file_output.stdout != ""

    - name: Set cron job for ObserviumHeartbeat.sh
      ansible.builtin.cron:
        name: "Observium Heartbeat"
        job: "/usr/local/bin/ObserviumHeartbeat.sh"
        minute: "*/5"
      when: obs_file_output.stdout != ""

# - name: Observium migration (old -> new) via SSM + local restore
#   block:
#     - name: Assert required variables are present
#       ansible.builtin.assert:
#         that:
#           - aws_region is defined
#           - final_vars.old_gw_b_instnace_id is defined
#           - observium_s3_bucket is defined
#           - observium_s3_prefix is defined
#           - observium_migration_tag is defined
#           - observium_base is defined
#           - web_user is defined
#           - web_group is defined

#     - name: Ensure tools present on new instance
#       ansible.builtin.package:
#         name:
#           - awscli
#           - tar
#           - gzip
#         state: present
#       become: true

#     - name: Check if dump exists in S3
#       ansible.builtin.shell: |
#         aws s3api head-object \
#           --bucket "{{ observium_s3_bucket }}" \
#           --key "{{ s3_key_dump }}"
#       register: _s3_dump_head
#       changed_when: false
#       failed_when: false

#     - name: Check if RRD tar exists in S3
#       ansible.builtin.shell: |
#         aws s3api head-object \
#           --bucket "{{ observium_s3_bucket }}" \
#           --key "{{ s3_key_rrd }}"
#       register: _s3_rrd_head
#       changed_when: false
#       failed_when: false

#     - name: Decide if SSM dump/upload is needed
#       ansible.builtin.set_fact:
#         _need_ssm_dump: >-
#           {{ (_s3_dump_head.rc != 0) or (_s3_rrd_head.rc != 0) }}

#     - name: Build old-instance migration script (SSM)
#       ansible.builtin.set_fact:
#         old_migration_script: |
#           set -Eeuo pipefail
#           BASE="{{ observium_base }}"
#           OUT="$BASE/migrate/{{ observium_migration_tag }}"
#           S3="{{ s3_uri_base }}"
#           mkdir -p "$OUT"

#           echo "[OLD] Preparing dump to $OUT and upload to $S3"

#           # Ensure tools
#           if ! command -v mysqldump >/dev/null 2>&1; then
#             if command -v apt-get >/dev/null 2>&1; then
#               apt-get update -y && apt-get install -y mariadb-client || true
#             elif command -v yum >/dev/null 2>&1; then
#               yum install -y mariadb || true
#             elif command -v dnf >/dev/null 2>&1; then
#               dnf install -y mariadb || true
#             fi
#           fi
#           if ! command -v aws >/dev/null 2>&1; then
#             if command -v apt-get >/dev/null 2>&1; then
#               apt-get update -y && apt-get install -y awscli || true
#             elif command -v yum >/dev/null 2>&1; then
#               yum install -y awscli || true
#             elif command -v dnf >/dev/null 2>&1; then
#               dnf install -y awscli || true
#             fi
#           fi

#           # DB dump (skip if already exists locally)
#           if [ ! -s "$OUT/observium-dump.sql" ]; then
#             echo "[OLD] Creating DB dump..."
#             MYSQL_PWD='{{ observium_db_pass_old }}' \
#             mysqldump -u '{{ observium_db_user_old }}' \
#               '{{ observium_db_name_old }}' \
#               --no-tablespaces --single-transaction \
#               --add-drop-table --extended-insert \
#               > "$OUT/observium-dump.sql"
#           else
#             echo "[OLD] Local DB dump exists, skipping."
#           fi

#           # RRD archive (skip if already exists locally)
#           if [ ! -s "$OUT/observium-rrd.tar.gz" ]; then
#             echo "[OLD] Archiving RRD directory..."
#             tar -C "$BASE" -zcf "$OUT/observium-rrd.tar.gz" rrd
#           else
#             echo "[OLD] Local RRD archive exists, skipping."
#           fi

#           # Save config.php (optional)
#           if [ -f "$BASE/config.php" ] && [ ! -s "$OUT/config.php" ]; then
#             cp -a "$BASE/config.php" "$OUT/config.php"
#           fi

#           # Upload to S3 only if missing
#           if ! aws s3 ls "$S3/observium-dump.sql" >/dev/null 2>&1; then
#             echo "[OLD] Uploading dump..."
#             aws s3 cp "$OUT/observium-dump.sql" "$S3/"
#           else
#             echo "[OLD] Dump already in S3, skipping upload."
#           fi

#           if ! aws s3 ls "$S3/observium-rrd.tar.gz" >/dev/null 2>&1; then
#             echo "[OLD] Uploading RRD archive..."
#             aws s3 cp "$OUT/observium-rrd.tar.gz" "$S3/"
#           else
#             echo "[OLD] RRD already in S3, skipping upload."
#           fi

#           if [ -f "$OUT/config.php" ] && \
#              ! aws s3 ls "$S3/config.php" >/dev/null 2>&1; then
#             echo "[OLD] Uploading config.php..."
#             aws s3 cp "$OUT/config.php" "$S3/"
#           fi

#           echo "[OLD] DONE"
#       when: _need_ssm_dump

#     - name: Trigger SSM on OLD instance to create/upload artifacts
#       ansible.builtin.shell: |
#         aws ssm send-command \
#           --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
#           --document-name "AWS-RunShellScript" \
#           --parameters '{{ {"commands": [ old_migration_script ] } | to_json }}' \
#           --region "{{ aws_region }}" \
#           --output text \
#           --query 'Command.CommandId'
#       register: _old_cmd_id
#       when: _need_ssm_dump

#     - name: Wait for OLD instance SSM command to finish
#       ansible.builtin.shell: |
#         aws ssm get-command-invocation \
#           --command-id "{{ _old_cmd_id.stdout }}" \
#           --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
#           --region "{{ aws_region }}" \
#           --output text \
#           --query 'Status'
#       register: _old_status
#       retries: 180
#       delay: 5
#       until: _old_status.stdout in ['Success']
#       failed_when: _old_status.stdout in ['Cancelled','TimedOut','Failed','DeliveryTimedOut']
#       changed_when: false
#       when: _need_ssm_dump

#     - name: Ensure local migration directory exists on new instance
#       ansible.builtin.file:
#         path: "{{ obs_mig_dir }}"
#         state: directory
#         mode: "0755"
#       become: true

#     - name: Download DB dump from S3 if not present
#       ansible.builtin.shell: |
#         aws s3 cp "{{ s3_uri_base }}/observium-dump.sql" \
#           "{{ obs_mig_dir }}/"
#       args:
#         creates: "{{ obs_mig_dir }}/observium-dump.sql"
#       changed_when: true
#       become: true

#     - name: Download RRD archive from S3 if not present
#       ansible.builtin.shell: |
#         aws s3 cp "{{ s3_uri_base }}/observium-rrd.tar.gz" \
#           "{{ obs_mig_dir }}/"
#       args:
#         creates: "{{ obs_mig_dir }}/observium-rrd.tar.gz"
#       changed_when: true
#       become: true

#     - name: Download config.php snapshot if present (best effort)
#       ansible.builtin.shell: |
#         aws s3 cp "{{ s3_uri_base }}/config.php" \
#           "{{ obs_mig_dir }}/" || true
#       changed_when: false
#       become: true

#     - name: Check if migration already applied
#       ansible.builtin.stat:
#         path: "{{ obs_mark }}"
#       register: _mig_mark

#     - name: Import DB and restore RRDs (one-time per tag)
#       block:
#         - name: Import Observium database from dump
#           ansible.builtin.shell: |
#             set -Eeuo pipefail
#             BASE="{{ observium_base }}"
#             OUT="{{ obs_mig_dir }}"
#             DB="{{ observium_db_name_old }}"
#             # Try building MYSQL command from config.php; fallback to socket/root
#             MYSQL=(mysql)
#             if ! "${MYSQL[@]}" -e 'SELECT 1' >/dev/null 2>&1; then
#               if command -v php >/dev/null 2>&1 && \
#                  [ -f "$BASE/config.php" ]; then
#                 DBU=$(php -r 'include "/opt/observium/config.php";
#                   echo $config["db_user"];')
#                 DBP=$(php -r 'include "/opt/observium/config.php";
#                   echo $config["db_pass"];')
#                 MYSQL=(mysql -u "$DBU" -p"$DBP")
#               fi
#             fi

#             # Ensure database exists
#             if ! "${MYSQL[@]}" -e "USE ${DB};" >/dev/null 2>&1; then
#               "${MYSQL[@]}" -e "CREATE DATABASE IF NOT EXISTS ${DB}
#                 CHARACTER SET utf8 COLLATE utf8_general_ci;"
#             fi

#             # Drop all tables idempotently
#             "${MYSQL[@]}" -N -e "
#               SELECT CONCAT('DROP TABLE IF EXISTS \`', table_name, '\`;')
#               FROM information_schema.tables
#               WHERE table_schema='${DB}';
#             " | "${MYSQL[@]}" "${DB}" || true

#             # Import dump
#             "${MYSQL[@]}" "${DB}" < "${OUT}/observium-dump.sql"
#           args:
#             executable: /bin/bash
#           become: true

#         - name: Restore RRD directory
#           ansible.builtin.shell: |
#             set -Eeuo pipefail
#             BASE="{{ observium_base }}"
#             OUT="{{ obs_mig_dir }}"
#             TAG="{{ observium_migration_tag }}"

#             if [ -d "$BASE/rrd" ] && [ ! -d "$BASE/rrd.bak.$TAG" ]; then
#               mv "$BASE/rrd" "$BASE/rrd.bak.$TAG"
#             fi

#             tar -C "$BASE" -zxf "${OUT}/observium-rrd.tar.gz"

#             chown -R "{{ web_user }}:{{ web_group }}" "$BASE/rrd" || true
#           args:
#             executable: /bin/bash
#           become: true

#         - name: Write migration done marker
#           ansible.builtin.file:
#             path: "{{ obs_mark }}"
#             state: touch
#             mode: "0644"
#           become: true
#       when: not _mig_mark.stat.exists

- name: Observium migration block
  block:
    - name: Check if migration has already been completed
      ansible.builtin.stat:
        path: /opt/observium/.migration_completed
      register: migration_status

    - name: Migration tasks
      block:
        - name: Stop Observium cron jobs on old server
          ansible.builtin.shell: |
            aws ssm send-command \
              --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["crontab -l > /tmp/old_crontab.bak && crontab -r || true"]' \
              --region "{{ aws_region }}" \
              --output text \
              --query 'Command.CommandId'
          register: stop_cron_cmd

        - name: Wait for cron stop command to complete
          ansible.builtin.shell: |
            aws ssm wait command-executed \
              --command-id "{{ stop_cron_cmd.stdout }}" \
              --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
              --region "{{ aws_region }}"

        - name: Check old server disk space and RRD directory
          ansible.builtin.shell: |
            aws ssm send-command \
              --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["df -h /opt/observium && ls -la /opt/observium/rrd && du -sh /opt/observium/rrd"]' \
              --region "{{ aws_region }}" \
              --output text \
              --query 'Command.CommandId'
          register: check_space_cmd

        - name: Get disk space check results
          ansible.builtin.shell: |
            aws ssm get-command-invocation \
              --command-id "{{ check_space_cmd.stdout }}" \
              --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
              --region "{{ aws_region }}" \
              --output text \
              --query 'StandardOutputContent'
          register: space_check_result
          retries: 10
          delay: 2
          until: space_check_result.rc == 0

        - name: Display disk space info
          ansible.builtin.debug:
            msg: "Old server disk space and RRD info: {{ space_check_result.stdout }}"

        - name: Create MySQL dump on old server
          ansible.builtin.shell: |
            aws ssm send-command \
              --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["cd /opt/observium && mysqldump -u observium -pprologic --databases observium --no-tablespaces --add-drop-table --extended-insert > observium-dump.sql && ls -lh observium-dump.sql"]' \
              --region "{{ aws_region }}" \
              --output text \
              --query 'Command.CommandId'
          register: mysql_dump_cmd

        - name: Wait for MySQL dump to complete
          ansible.builtin.shell: |
            aws ssm wait command-executed \
              --command-id "{{ mysql_dump_cmd.stdout }}" \
              --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
              --region "{{ aws_region }}"

        - name: Create RRD archive on old server with better error handling
          ansible.builtin.shell: |
            aws ssm send-command \
              --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["cd /opt/observium && echo \"Starting RRD archive creation...\" && tar --exclude=\"*.tmp\" -czf observium-rrd.tar.gz rrd/ && echo \"Archive created successfully\" && ls -lh observium-rrd.tar.gz"]' \
              --region "{{ aws_region }}" \
              --timeout-seconds 1800 \
              --output text \
              --query 'Command.CommandId'
          register: rrd_archive_cmd

        - name: Check RRD archive command status
          ansible.builtin.shell: |
            aws ssm get-command-invocation \
              --command-id "{{ rrd_archive_cmd.stdout }}" \
              --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
              --region "{{ aws_region }}" \
              --output json
          register: rrd_status_check
          retries: 30
          delay: 10
          until: rrd_status_check.stdout | from_json | json_query('Status') != 'InProgress'

        - name: Display RRD archive results
          ansible.builtin.debug:
            msg: |
              RRD Archive Status: {{ (rrd_status_check.stdout | from_json).Status }}
              Output: {{ (rrd_status_check.stdout | from_json).StandardOutputContent }}
              Error: {{ (rrd_status_check.stdout | from_json).StandardErrorContent }}

        - name: Fail if RRD archive creation failed
          ansible.builtin.fail:
            msg: "RRD archive creation failed: {{ (rrd_status_check.stdout | from_json).StandardErrorContent }}"
          when: (rrd_status_check.stdout | from_json).Status == 'Failed'

        - name: Create smaller RRD archives if main archive failed
          block:
            - name: Get list of device directories in RRD
              ansible.builtin.shell: |
                aws ssm send-command \
                  --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
                  --document-name "AWS-RunShellScript" \
                  --parameters 'commands=["find /opt/observium/rrd -maxdepth 1 -type d | head -20"]' \
                  --region "{{ aws_region }}" \
                  --output text \
                  --query 'Command.CommandId'
              register: list_rrd_dirs_cmd

            - name: Get RRD directory list
              ansible.builtin.shell: |
                aws ssm get-command-invocation \
                  --command-id "{{ list_rrd_dirs_cmd.stdout }}" \
                  --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
                  --region "{{ aws_region }}" \
                  --output text \
                  --query 'StandardOutputContent'
              register: rrd_dirs_list
              retries: 10
              delay: 2
              until: rrd_dirs_list.rc == 0

            - name: Create multiple smaller RRD archives
              ansible.builtin.shell: |
                aws ssm send-command \
                  --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
                  --document-name "AWS-RunShellScript" \
                  --parameters 'commands=["cd /opt/observium && tar --exclude=\"*.tmp\" -czf observium-rrd-part1.tar.gz rrd/*.rrd && tar --exclude=\"*.tmp\" -czf observium-rrd-part2.tar.gz rrd/*/"]' \
                  --region "{{ aws_region }}" \
                  --timeout-seconds 1800 \
                  --output text \
                  --query 'Command.CommandId'
              register: rrd_parts_cmd

            - name: Wait for RRD parts creation
              ansible.builtin.shell: |
                aws ssm get-command-invocation \
                  --command-id "{{ rrd_parts_cmd.stdout }}" \
                  --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
                  --region "{{ aws_region }}" \
                  --output json
              register: rrd_parts_status
              retries: 30
              delay: 10
              until: rrd_parts_status.stdout | from_json | json_query('Status') != 'InProgress'

          when: (rrd_status_check.stdout | from_json).Status == 'Failed'

        - name: Get MySQL dump from old server
          ansible.builtin.shell: |
            aws ssm send-command \
              --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["base64 -w 0 /opt/observium/observium-dump.sql"]' \
              --region "{{ aws_region }}" \
              --output text \
              --query 'Command.CommandId'
          register: get_dump_cmd

        - name: Wait and fetch MySQL dump content
          ansible.builtin.shell: |
            aws ssm get-command-invocation \
              --command-id "{{ get_dump_cmd.stdout }}" \
              --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
              --region "{{ aws_region }}" \
              --output text \
              --query 'StandardOutputContent'
          register: mysql_dump_content
          retries: 15
          delay: 5
          until: mysql_dump_content.rc == 0

        - name: Save MySQL dump to new server
          ansible.builtin.shell: |
            echo "{{ mysql_dump_content.stdout }}" | base64 -d > /opt/observium/observium-dump.sql
          when: mysql_dump_content.stdout != ""

        - name: Get single RRD archive (if successful)
          block:
            - name: Transfer single RRD archive
              ansible.builtin.shell: |
                aws ssm send-command \
                  --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
                  --document-name "AWS-RunShellScript" \
                  --parameters 'commands=["split -b 45M /opt/observium/observium-rrd.tar.gz /opt/observium/rrd-chunk- && ls /opt/observium/rrd-chunk-*"]' \
                  --region "{{ aws_region }}" \
                  --output text \
                  --query 'Command.CommandId'
              register: split_rrd_cmd

            - name: Get RRD chunks list
              ansible.builtin.shell: |
                aws ssm get-command-invocation \
                  --command-id "{{ split_rrd_cmd.stdout }}" \
                  --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
                  --region "{{ aws_region }}" \
                  --output text \
                  --query 'StandardOutputContent'
              register: rrd_chunks_list
              retries: 15
              delay: 5
              until: rrd_chunks_list.rc == 0

            - name: Transfer and reassemble RRD chunks
              ansible.builtin.shell: |
                cd /opt/observium
                rm -f observium-rrd.tar.gz
                {% for chunk in rrd_chunks_list.stdout.split('\n') | select('match', '.*rrd-chunk-.*') | list %}
                CMD_ID=$(aws ssm send-command --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" --document-name "AWS-RunShellScript" --parameters 'commands=["base64 -w 0 {{ chunk }}"]' --region "{{ aws_region }}" --output text --query 'Command.CommandId')
                sleep 2
                CONTENT=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "{{ final_vars.old_gw_b_instnace_id }}" --region "{{ aws_region }}" --output text --query 'StandardOutputContent')
                echo "$CONTENT" | base64 -d >> observium-rrd.tar.gz
                {% endfor %}
              when: rrd_chunks_list.stdout != ""

          when: (rrd_status_check.stdout | from_json).Status == 'Success'

        - name: Get config.php from old server
          ansible.builtin.shell: |
            aws ssm send-command \
              --instance-ids "{{ final_vars.old_gw_b_instnace_id }}" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["base64 -w 0 /opt/observium/config.php"]' \
              --region "{{ aws_region }}" \
              --output text \
              --query 'Command.CommandId'
          register: get_config_cmd

        - name: Fetch config.php content
          ansible.builtin.shell: |
            aws ssm get-command-invocation \
              --command-id "{{ get_config_cmd.stdout }}" \
              --instance-id "{{ final_vars.old_gw_b_instnace_id }}" \
              --region "{{ aws_region }}" \
              --output text \
              --query 'StandardOutputContent'
          register: config_content
          retries: 10
          delay: 3
          until: config_content.rc == 0

        - name: Backup current config.php
          ansible.builtin.copy:
            src: /opt/observium/config.php
            dest: /opt/observium/config.php.new-install.bak
            remote_src: true

        - name: Save old config.php for reference
          ansible.builtin.shell: |
            echo "{{ config_content.stdout }}" | base64 -d > /opt/observium/config.php.old
          when: config_content.stdout != ""

        - name: Stop current Observium services
          ansible.builtin.systemd:
            name: "{{ item }}"
            state: stopped
          loop:
            - httpd
            - mariadb
          ignore_errors: yes

        - name: Start MariaDB service
          ansible.builtin.systemd:
            name: mariadb
            state: started

        - name: Drop existing Observium tables
          ansible.builtin.shell: |
            mysql -u root -pprologic -e "DROP DATABASE IF EXISTS observium;"
            mysql -u root -pprologic -e "CREATE DATABASE observium;"
            mysql -u root -pprologic -e "GRANT ALL PRIVILEGES ON observium.* TO 'observium'@'localhost' IDENTIFIED BY 'prologic';"
            mysql -u root -pprologic -e "FLUSH PRIVILEGES;"

        - name: Import MySQL dump
          ansible.builtin.shell: |
            cd /opt/observium
            mysql -u observium -pprologic observium < observium-dump.sql

        - name: Backup current RRD directory
          ansible.builtin.shell: |
            cd /opt/observium
            mv rrd rrd.new-install.bak || true
          ignore_errors: yes

        - name: Extract RRD archive
          ansible.builtin.shell: |
            cd /opt/observium
            tar zxf observium-rrd.tar.gz
          when: (rrd_status_check.stdout | from_json).Status == 'Success'

        - name: Set proper ownership for Observium files
          ansible.builtin.file:
            path: "{{ item }}"
            owner: apache
            group: apache
            recurse: yes
          loop:
            - /opt/observium/rrd
            - /opt/observium/logs

        - name: Start httpd service
          ansible.builtin.systemd:
            name: httpd
            state: started
            enabled: yes

        - name: Mark migration as completed
          ansible.builtin.file:
            path: /opt/observium/.migration_completed
            state: touch
            owner: apache
            group: apache

      when: not migration_status.stat.exists

  rescue:
    - name: Migration failed - restore services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
      loop:
        - mariadb
        - httpd
      ignore_errors: yes

    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "Observium migration failed. Check the debug output above for details."
